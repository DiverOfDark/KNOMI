name: PlatformIO CI

permissions:
  contents: write

on: [push, workflow_dispatch]

jobs:
  build-firmware:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        device: [knomiv1, knomiv2]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        
      - name: Cache NPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/ui-ng/node_modules
          key: ${{ runner.os }}-${{matrix.device}}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Cache PIO
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            ~/.cache/pip
            ${{ github.workspace }}/.pio
          key: ${{ runner.os }}-${{matrix.device}}-pio-${{ hashFiles('**/platformio.ini') }}

      - name: Setup Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio

      - name: Build Firmware Core
        run: | 
            pio run --disable-auto-clean -e ${{matrix.device}}

      - name: Build Firmware LittleFS
        run: | 
            pio run --disable-auto-clean -e ${{matrix.device}} -t buildfs

      - name: Build Full Firmware
        run: | 
            pio run --disable-auto-clean -e ${{matrix.device}} -t merge_firmware

      - name: Prepare artifacts for archive 
        run: |
            mkdir ${{matrix.device}}
            cp .pio/build/${{matrix.device}}/buildinfo.json buildinfo.json
            cp .pio/build/${{matrix.device}}/firmware_full.bin ${{matrix.device}}/firmware_full.bin
            cp .pio/build/${{matrix.device}}/firmware_full.offset ${{matrix.device}}/firmware_full.offset
            cp .pio/build/${{matrix.device}}/firmware.bin ${{matrix.device}}/firmware.bin 
            cp .pio/build/${{matrix.device}}/firmware.elf ${{matrix.device}}/firmware.elf
            cp .pio/build/${{matrix.device}}/littlefs.bin ${{matrix.device}}/littlefs.bin
          
      - name: Archive Firmware Files
        uses: actions/upload-artifact@v4
        with: 
          name: firmware-${{matrix.device}}
          path: |
            buildinfo.json
            ${{matrix.device}}/firmware.bin
            ${{matrix.device}}/firmware_full.bin
            ${{matrix.device}}/firmware_full.offset
            ${{matrix.device}}/firmware.elf
            ${{matrix.device}}/littlefs.bin

  build-flasher:
    needs: build-firmware
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        
      - name: Install required packages
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install -y libudev1 libudev-dev pkg-config

      - name: Cache Crates
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            ${{ github.workspace }}/rs-flasher/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Rust toolchain ${{ matrix.os }}
        uses: dtolnay/rust-toolchain@stable

      - name: Download Firmware Files
        id: download-flasher
        uses: actions/download-artifact@v4
        with:
          pattern: firmware-*
          path: rs-flasher/resources
          merge-multiple: true

      - name: Build Flasher
        run: cargo build --release --manifest-path rs-flasher/Cargo.toml

      - name: Build Flasher (macOS Arm)
        if: matrix.os == 'macos-latest'
        run: |
            rustup target add aarch64-apple-darwin
            cargo build --target aarch64-apple-darwin --release --manifest-path rs-flasher/Cargo.toml

      - name: Copy result
        if: matrix.os == 'windows-latest'
        run: | 
            dir rs-flasher/target/release
            copy rs-flasher/target/release/rs-flasher.exe rs-flasher.exe

      - name: Copy result
        if: matrix.os == 'macos-latest'
        run: | 
            ls rs-flasher/target/release
            cp rs-flasher/target/release/rs-flasher rs-flasher.macOS-amd64
            cp rs-flasher/target/aarch64-apple-darwin/release/rs-flasher rs-flasher.macOS-arm64

      - name: Copy result
        if: matrix.os == 'ubuntu-latest'
        run: | 
            ls rs-flasher/target/release
            cp rs-flasher/target/release/rs-flasher rs-flasher.linux-amd64

      - name: Archive Flasher
        uses: actions/upload-artifact@v4
        with: 
          name: flasher-${{matrix.os}}
          path: |
            rs-flasher.exe
            rs-flasher.macOS-amd64
            rs-flasher.macOS-arm64
            rs-flasher.linux-amd64

  release:
    needs: 
      - build-flasher
    if: startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: 
      name: github-releases
    steps:
    - name: Download Firmware Files
      id: download-firmware
      uses: actions/download-artifact@v4
      with:
        pattern: firmware-*
        merge-multiple: true

    - name: Download Flasher Files
      id: download-flasher
      uses: actions/download-artifact@v4
      with:
        pattern: flasher-*
        merge-multiple: true

    - name: Build Changelog
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v4.2.2
      with:
        configurationJson: |
          {
            "categories": [
              {
                  "title": "## ðŸš€ Features",
                  "labels": ["feature"]
              },
              {
                  "title": "## ðŸ“¦ Dependencies",
                  "labels": ["dependencies"]
              }
            ]
          }

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        body: | 
          Files published:
           - rs-flasher - Tool to update firmware on your KNOMI without installing any dependencies
           - firmware_full.bin - Full image to be flashed by esptool 
           - firmware.bin - OTA update
           - firmware.elf - debug symbols
           - littlefs.bin - partition with resources

          ${{steps.build_changelog.outputs.changelog}}
        files: | 
          ${{steps.download-firmware.outputs.download-path}}/knomiv1/firmware_full.bin
          ${{steps.download-firmware.outputs.download-path}}/knomiv1/firmware.bin
          ${{steps.download-firmware.outputs.download-path}}/knomiv1/firmware.elf
          ${{steps.download-firmware.outputs.download-path}}/knomiv1/littlefs.bin
          ${{steps.download-firmware.outputs.download-path}}/knomiv2/firmware_full.bin
          ${{steps.download-firmware.outputs.download-path}}/knomiv2/firmware.bin
          ${{steps.download-firmware.outputs.download-path}}/knomiv2/firmware.elf
          ${{steps.download-firmware.outputs.download-path}}/knomiv2/littlefs.bin
          ${{steps.download-flasher.outputs.download-path}}/rs-flasher.exe
          ${{steps.download-flasher.outputs.download-path}}/rs-flasher.linux-amd64
          ${{steps.download-flasher.outputs.download-path}}/rs-flasher.macOS-amd64
          ${{steps.download-flasher.outputs.download-path}}/rs-flasher.macOS-arm64
