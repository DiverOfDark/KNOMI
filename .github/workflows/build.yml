name: PlatformIO CI

permissions:
  contents: write

on: [push, pull_request, workflow_dispatch]

jobs:
  build-firmware:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        
      - name: Cache NPM
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/Firmware/ui-ng/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Cache PIO
        uses: actions/cache@v3
        with:
          path: |
            ~/.platformio
            ${{ github.workspace }}/Firmware/.pio
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio

      - name: Build Firmware Core
        run: | 
            cd Firmware 
            pio run --disable-auto-clean -e esp32dev

      - name: Build Firmware LittleFS
        run: | 
            cd Firmware 
            pio run --disable-auto-clean -e esp32dev -t buildfs

      - name: Build Full Firmware
        run: | 
            cd Firmware 
            pio run --disable-auto-clean -e esp32dev -t merge_firmware

      - name: Prepare artifacts for archive 
        run: | 
            cd Firmware 
            cp .pio/build/esp32dev/buildinfo.json ../buildinfo.json
            cp .pio/build/esp32dev/firmware_full.bin ../firmware_full.bin
            cp .pio/build/esp32dev/firmware.bin ../firmware.bin 
            cp .pio/build/esp32dev/firmware.elf ../firmware.elf
            cp .pio/build/esp32dev/littlefs.bin ../littlefs.bin
          
      - name: Archive Firmware Files
        uses: actions/upload-artifact@v3
        with: 
          name: firmware
          path: |
            buildinfo.json
            firmware.bin
            firmware_full.bin
            firmware.elf
            littlefs.bin

  package-installer:
    needs: build-firmware
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Checkout PyInstaller
        uses: actions/checkout@v4
        with:
          repository: 'pyinstaller/pyinstaller'
          ref: 'develop'
          path: 'pyinstaller'

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Download Firmware Files
        uses: actions/download-artifact@v3
        with:
          name: firmware
          path: Firmware/.pio/build/esp32dev

      - name: Setup PyInstaller
        run: |
          cd ${{ github.workspace }}
          cd pyinstaller 
          cd bootloader
          pip install wheel
          python ./waf all
          cd ..
          pip install . |

      - name: Run Python Script
        run: |
          cd ${{ github.workspace }}
          cd Firmware
          cd flasher
          pip install -r requirements.txt --target .
          python main.py

      - name: Archive Flasher
        uses: actions/upload-artifact@v3
        with: 
          name: flasher
          path: |
            Firmware/.build/dist/*

  release:
    needs: 
      - package-installer
    if: startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: 
      name: github-releases
    steps:
    - name: Download Firmware Files
      id: download
      uses: actions/download-artifact@v3
      with:
        name: firmware

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: | 
          ${{steps.download.outputs.download-path}}/firmware.bin
          ${{steps.download.outputs.download-path}}/firmware.elf
          ${{steps.download.outputs.download-path}}/littlefs.bin