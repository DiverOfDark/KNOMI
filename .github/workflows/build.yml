name: PlatformIO CI

permissions:
  contents: write

on: [push, pull_request, workflow_dispatch]

jobs:
  build-firmware:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        
      - name: Cache NPM
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/Firmware/ui-ng/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Cache PIO
        uses: actions/cache@v3
        with:
          path: |
            ~/.platformio
            ~/.cache/pip
            ${{ github.workspace }}/Firmware/.pio
          key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio

      - name: Build Firmware Core
        run: | 
            cd Firmware 
            pio run --disable-auto-clean -e esp32dev

      - name: Build Firmware LittleFS
        run: | 
            cd Firmware 
            pio run --disable-auto-clean -e esp32dev -t buildfs

      - name: Build Full Firmware
        run: | 
            cd Firmware 
            pio run --disable-auto-clean -e esp32dev -t merge_firmware

      - name: Prepare artifacts for archive 
        run: | 
            cd Firmware 
            cp .pio/build/esp32dev/buildinfo.json ../buildinfo.json
            cp .pio/build/esp32dev/firmware_full.bin ../firmware_full.bin
            cp .pio/build/esp32dev/firmware.bin ../firmware.bin 
            cp .pio/build/esp32dev/firmware.elf ../firmware.elf
            cp .pio/build/esp32dev/littlefs.bin ../littlefs.bin
          
      - name: Archive Firmware Files
        uses: actions/upload-artifact@v3
        with: 
          name: firmware
          path: |
            buildinfo.json
            firmware.bin
            firmware_full.bin
            firmware.elf
            littlefs.bin

  build-flasher:
    needs: build-firmware
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - x86_64-unknown-linux-gnu
          - aarch64-apple-darwin
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        
      - name: Install required packages
        run: sudo apt install -y libudev-dev pkg-config

      - name: Cache Crates
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            ${{ github.workspace }}/Firmware/rs-flasher/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Rust toolchain ${{ matrix.target }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Download Firmware Files
        uses: actions/download-artifact@v3
        with:
          name: firmware
          path: Firmware/rs-flasher/resources

      - name: Build Flasher
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }} --manifest-path Firmware/rs-flasher/Cargo.toml

      - name: Debug dir
        run: | 
            cd Firmware/rs-flasher/target
            dir

      - name: Archive Flasher
        uses: actions/upload-artifact@v3
        with: 
          name: flasher
          path: |
            Firmware/rs-flasher/target/rs-flasher.exe

  release:
    needs: 
      - build-flasher
    if: startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: 
      name: github-releases
    steps:
    - name: Download Firmware Files
      id: download1
      uses: actions/download-artifact@v3
      with:
        name: firmware
    - name: Download Flasher Files
      id: download2
      uses: actions/download-artifact@v3
      with:
        name: flasher

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: | 
          ${{steps.download1.outputs.download-path}}/firmware_full.bin
          ${{steps.download1.outputs.download-path}}/firmware.bin
          ${{steps.download1.outputs.download-path}}/firmware.elf
          ${{steps.download1.outputs.download-path}}/littlefs.bin
          ${{steps.download2.outputs.download-path}}/flash_firmware.Windows.exe